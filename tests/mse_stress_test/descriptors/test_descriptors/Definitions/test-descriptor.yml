---
author: "Ignacio Dominguez (ATOS)"
description: "MSE CPU stress test"
descriptor_schema: https://raw.githubusercontent.com/sonata-nfv/tng-schema/master/test-descriptor/testdescriptor-schema.yml
name: "test-immersive-media-stress-mse"
vendor: "eu.5gtango.atos"
version: '0.1'

service_platforms:
  - "SONATA"
testing_category:
  - "benchmarking"
testing_tags:
  - "mse-stress-test"

phases:
- id: setup
  steps:
  - action: deploy
    description: "Deploying a NS"
    name: deployment
  - action: configure
    description: "Configuration"
    name: configuration
    probes:
    - id: initiator
      description: "A service initial configuration container"
      image: "ignaciodomin/media-initiator:stress"
      name: initiator
      parameters:
      - key: CAMERAS
        value: '5' #This value is to configure the number of emulated cameras
      - key: CMS
        value: '$(vnf-cms/endpoints/id:floating_ip/address)'
    - id: parser
      description: "Parser"
      image: "ignaciodomin/media-parser:stress"
      name: parser
      parameters: []
    - id: cpe
      description: "Content Producer Emulator (CPE) To generate a RTMP flow"
      image: "ignaciodomin/media-cpe:stress"
      name: cpe
      parameters:
      - key: AGGREGATOR
        value: '$(vnf-ma/endpoints/id:floating_ip/address)'
      - key: STREAM
        value: test
      - key: VIDEO
        value: 'h264_360_3M_judo.mkv'
- id: exercise
  steps:
  - command: /bin/sh
    dependencies: []
    description: "Starting the initiator"
    entrypoint: /app/entrypoint.sh
    index: 1
    instances: 1
    name: initiator
    output:
    - {results: logs.txt}
    run: initiator
  - command: /bin/sh
    description: "Starting the CPE that simulates the camera"
    entrypoint: /app/entrypoint.sh
    index: 1
    instances: 1
    name: cpe
    output:
    - {results: logs.txt}
    run: cpe
    start_delay: 5
    dependencies: [initiator]
  - command: /bin/sh
    dependencies: [initiator, cpe]
    description: "Parse the results"
    entrypoint: /app/entrypoint.sh
    index: 1
    instances: 1
    name: parser
    output:
    - {results: result.json}
    run: parser
    start_delay: 30
- id: verification
  steps:
  - step: parser
    description: "Check obtained results"
    name: parser
    conditions:
    - condition: "="
      file: result.json
      find: segments
      name: segments
      type: json
      value: 'correct'
verdict: pass
